#include <SPI.h>
#include <Gamebuino.h>

#define POS_X_BON 2
#define POS_Y_BON_0 2
#define POS_Y_BON_1 18
#define POS_Y_BON_2 34
#define POS_X_AMEL 70
#define POS_Y_AMEL 2
#define POS_X_ART 32
#define POS_Y_ART 16
#define LARG_BOITE 12
#define LARG_CURS LARG_BOITE + 2

#define PRIX_N0_BON_0 50
#define PRIX_N0_BON_1 200
#define PRIX_N0_BON_2 100
#define PRIX_N0_AMEL 2000

Gamebuino gb;

struct t_partie {
    int bon_0 = 0, bon_1 = 0,
	bon_2 = 0, argent = 100,
	niveau = 0;
} partie;

int curs_y = 0, curs_x = 0;

const byte ambulant[] PROGMEM = {32,32,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xF,0xFF,0x80,0x0,0x1F,0xFF,0xC0,0xE0,0x3F,0xFF,0xE0,0xE0,0x1F,0xFF,0xC0,0xE0,0x8,0x3,0x81,0xF0,0x8,0x1,0x81,0xB0,0x1C,0x1,0x81,0x10,0x8,0x1,0x81,0x50,0x8,0x1,0x81,0xF0,0x8,0x0,0x80,0xB0,0x1C,0x0,0x80,0x90,0x1C,0x0,0x80,0x90,0x1C,0x6,0x80,0xB0,0x1C,0x6,0x80,0xB0,0x9,0xF,0x81,0xB0,0xB,0x4F,0x83,0xF0,0x1F,0xFF,0xFF,0xF0,0x10,0x0,0x4,0x90,0x15,0x69,0xD4,0xD0,0x16,0x69,0x54,0x50,0x15,0x4D,0xDC,0x50,0x15,0x6D,0x5C,0x50,0x30,0x0,0x6,0x70,0x4F,0xFF,0xFE,0x30,0x48,0x0,0x2,0xF0,0x30,0x0,0x2,0xF0,};
const byte broche[] PROGMEM = {16,12,0x40,0x40,0x64,0xC0,0x2E,0x0,0x1B,0x0,0x19,0x0,0x13,0x0,0x55,0x0,0x11,0x40,0x4E,0x0,0x14,0xC0,0x75,0xE0,0xFF,0xF0,};
const byte friteuse[] PROGMEM = {16,12,0x2,0x0,0x20,0x80,0x0,0x0,0xA6,0x0,0x34,0x0,0x3F,0xE0,0xBD,0x0,0xFF,0x0,0xBD,0x40,0x81,0x0,0x81,0x0,0x81,0x0,};
const byte kebabier[] PROGMEM = {16,12,0x1F,0x80,0x3F,0xC0,0x30,0xC0,0x29,0x40,0x20,0x40,0x22,0x40,0x27,0x40,0x10,0x80,0x3F,0xC0,0x41,0x20,0x44,0x20,0x40,0x20,};

const byte amelioration[] PROGMEM = {16,12,0x6,0x0,0xF,0x0,0x19,0x80,0x30,0xC0,0x60,0x60,0x70,0xE0,0x10,0x80,0x10,0x80,0x10,0x80,0x10,0x80,0x10,0x80,0x1F,0x80,};

void afficher();
void afficher_niveau();
void afficher_curseur();
void jeu();
void gerer_actions();

void setup(){
  gb.begin();
  gb.titleScreen(F("Master Kebab"));
}

void loop(){
  if(gb.update()){
      jeu();
  }
}

void jeu(){
    afficher();
    gerer_actions();
}

void gerer_actions(){
    if (gb.buttons.repeat(BTN_A,20))
    {
	if (curs_x == 0)
	{
	    if (curs_y == 0)
		acheter(&(partie.bon_0),prix_bon_0());;
	    if (curs_y == 1)
		acheter(&(partie.bon_1),prix_bon_1());
	    if (curs_y == 2)
		acheter(&(partie.bon_2),prix_bon_2());
	}
	else
	{
	    acheter(&(partie.niveau),prix_amel());;
	}
    }
}

void acheter(int *bon, int prix)
{
    if (partie.argent >= prix)
    {
	partie.argent -= prix;
	(*bon)++;
    }
}

int prix_bon_0(){
    int prix = 0;
    if (partie.niveau == 0)
    { prix = PRIX_N0_BON_0; }
    prix = prix + partie.bon_0 * prix / 8;
    return prix;
}


int prix_bon_1(){
    int prix = 0;
    if (partie.niveau == 0)
    { prix = PRIX_N0_BON_1; }
    prix = prix + partie.bon_1 * prix / 4;
    return prix;
}

int prix_bon_2(){
    int prix = 0;
    if (partie.niveau == 0)
    { prix = PRIX_N0_BON_2; }
    prix = prix + partie.bon_2 * prix / 4;
    return prix;
}

int prix_amel(){
    if (partie.niveau == 0)
	return PRIX_N0_AMEL;
    else return 0;
}


void afficher(){
    afficher_niveau();
    afficher_curseur();
}

void afficher_curseur(){
    int posx = 2, posy = 2;
    if (curs_x == 0)
	posx = POS_X_BON;
    else
	posx = POS_X_AMEL;
    switch (curs_y){
    case 0:
	pos_y = POS_Y_BON_0;
	break;
    case 1:
	pos_y = POS_Y_BON_1;
	break;
    case 2:
	pos_y = POS_Y_BON_2;
	break;
    }
    gb.display.drawRect(pos_x, pos_y, LARGE_CURS , LARG_CURS);
}

void afficher_niveau(){
    if (partie.niveau == 0) {
	gb.display.drawBitmap(POS_X_BON, POS_Y_BON_0, friteuse);
	gb.display.drawBitmap(POS_X_BON, POS_Y_BON_1, broche);
	gb.display.drawBitmap(POS_X_BON, POS_Y_BON_2, kebabier);
	gb.display.drawBitmap(POS_X_ART, POS_Y_ART, ambulant);
    }
    gb.display.drawBitmap(POS_X_AMEL, POS_Y_AMEL, amelioration);

}
